Javascript is a compiled language, but not like Java.

window == global scope

LHS -> Left hand side (=) -> target
RHS -> Right Hand side -> source

'use strict'; -> var needs to be declared (LHS)

undefined != undeclared;

undefined means is declared but with a special value. Is an actual value
undefined is a type


function first ->  function declaration
var foo = function(){}
    -> named function expression (anonymous function) (IIFE)


lexical scope -> compile time scope

eval()

------------------------------------------

Hoisting -> compiler pulls out declarations first. Function first then vars.
Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).